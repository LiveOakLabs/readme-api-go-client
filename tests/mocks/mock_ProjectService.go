// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	readme "github.com/liveoaklabs/readme-api-go-client/readme"
	mock "github.com/stretchr/testify/mock"
)

// MockProjectService is an autogenerated mock type for the ProjectService type
type MockProjectService struct {
	mock.Mock
}

type MockProjectService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProjectService) EXPECT() *MockProjectService_Expecter {
	return &MockProjectService_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields:
func (_m *MockProjectService) Get() (readme.Project, *readme.APIResponse, error) {
	ret := _m.Called()

	var r0 readme.Project
	var r1 *readme.APIResponse
	var r2 error
	if rf, ok := ret.Get(0).(func() (readme.Project, *readme.APIResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() readme.Project); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(readme.Project)
	}

	if rf, ok := ret.Get(1).(func() *readme.APIResponse); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*readme.APIResponse)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockProjectService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockProjectService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *MockProjectService_Expecter) Get() *MockProjectService_Get_Call {
	return &MockProjectService_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *MockProjectService_Get_Call) Run(run func()) *MockProjectService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProjectService_Get_Call) Return(_a0 readme.Project, _a1 *readme.APIResponse, _a2 error) *MockProjectService_Get_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockProjectService_Get_Call) RunAndReturn(run func() (readme.Project, *readme.APIResponse, error)) *MockProjectService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProjectService creates a new instance of MockProjectService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProjectService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProjectService {
	mock := &MockProjectService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
