// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	readme "github.com/liveoaklabs/readme-api-go-client/readme"
	mock "github.com/stretchr/testify/mock"
)

// MockAPIRegistryService is an autogenerated mock type for the APIRegistryService type
type MockAPIRegistryService struct {
	mock.Mock
}

type MockAPIRegistryService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAPIRegistryService) EXPECT() *MockAPIRegistryService_Expecter {
	return &MockAPIRegistryService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: definition, version
func (_m *MockAPIRegistryService) Create(definition string, version ...string) (readme.APIRegistrySaved, *readme.APIResponse, error) {
	_va := make([]interface{}, len(version))
	for _i := range version {
		_va[_i] = version[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, definition)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 readme.APIRegistrySaved
	var r1 *readme.APIResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(string, ...string) (readme.APIRegistrySaved, *readme.APIResponse, error)); ok {
		return rf(definition, version...)
	}
	if rf, ok := ret.Get(0).(func(string, ...string) readme.APIRegistrySaved); ok {
		r0 = rf(definition, version...)
	} else {
		r0 = ret.Get(0).(readme.APIRegistrySaved)
	}

	if rf, ok := ret.Get(1).(func(string, ...string) *readme.APIResponse); ok {
		r1 = rf(definition, version...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*readme.APIResponse)
		}
	}

	if rf, ok := ret.Get(2).(func(string, ...string) error); ok {
		r2 = rf(definition, version...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAPIRegistryService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAPIRegistryService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - definition string
//   - version ...string
func (_e *MockAPIRegistryService_Expecter) Create(definition interface{}, version ...interface{}) *MockAPIRegistryService_Create_Call {
	return &MockAPIRegistryService_Create_Call{Call: _e.mock.On("Create",
		append([]interface{}{definition}, version...)...)}
}

func (_c *MockAPIRegistryService_Create_Call) Run(run func(definition string, version ...string)) *MockAPIRegistryService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockAPIRegistryService_Create_Call) Return(_a0 readme.APIRegistrySaved, _a1 *readme.APIResponse, _a2 error) *MockAPIRegistryService_Create_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAPIRegistryService_Create_Call) RunAndReturn(run func(string, ...string) (readme.APIRegistrySaved, *readme.APIResponse, error)) *MockAPIRegistryService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: uuid
func (_m *MockAPIRegistryService) Get(uuid string) (string, *readme.APIResponse, error) {
	ret := _m.Called(uuid)

	var r0 string
	var r1 *readme.APIResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (string, *readme.APIResponse, error)); ok {
		return rf(uuid)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) *readme.APIResponse); ok {
		r1 = rf(uuid)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*readme.APIResponse)
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(uuid)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAPIRegistryService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockAPIRegistryService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - uuid string
func (_e *MockAPIRegistryService_Expecter) Get(uuid interface{}) *MockAPIRegistryService_Get_Call {
	return &MockAPIRegistryService_Get_Call{Call: _e.mock.On("Get", uuid)}
}

func (_c *MockAPIRegistryService_Get_Call) Run(run func(uuid string)) *MockAPIRegistryService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAPIRegistryService_Get_Call) Return(_a0 string, _a1 *readme.APIResponse, _a2 error) *MockAPIRegistryService_Get_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAPIRegistryService_Get_Call) RunAndReturn(run func(string) (string, *readme.APIResponse, error)) *MockAPIRegistryService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAPIRegistryService creates a new instance of MockAPIRegistryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAPIRegistryService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAPIRegistryService {
	mock := &MockAPIRegistryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
