// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	readme "github.com/liveoaklabs/readme-api-go-client/readme"
	mock "github.com/stretchr/testify/mock"
)

// MockDocService is an autogenerated mock type for the DocService type
type MockDocService struct {
	mock.Mock
}

type MockDocService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDocService) EXPECT() *MockDocService_Expecter {
	return &MockDocService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: params, options
func (_m *MockDocService) Create(params readme.DocParams, options ...readme.RequestOptions) (readme.Doc, *readme.APIResponse, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 readme.Doc
	var r1 *readme.APIResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(readme.DocParams, ...readme.RequestOptions) (readme.Doc, *readme.APIResponse, error)); ok {
		return rf(params, options...)
	}
	if rf, ok := ret.Get(0).(func(readme.DocParams, ...readme.RequestOptions) readme.Doc); ok {
		r0 = rf(params, options...)
	} else {
		r0 = ret.Get(0).(readme.Doc)
	}

	if rf, ok := ret.Get(1).(func(readme.DocParams, ...readme.RequestOptions) *readme.APIResponse); ok {
		r1 = rf(params, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*readme.APIResponse)
		}
	}

	if rf, ok := ret.Get(2).(func(readme.DocParams, ...readme.RequestOptions) error); ok {
		r2 = rf(params, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockDocService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockDocService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - params readme.DocParams
//   - options ...readme.RequestOptions
func (_e *MockDocService_Expecter) Create(params interface{}, options ...interface{}) *MockDocService_Create_Call {
	return &MockDocService_Create_Call{Call: _e.mock.On("Create",
		append([]interface{}{params}, options...)...)}
}

func (_c *MockDocService_Create_Call) Run(run func(params readme.DocParams, options ...readme.RequestOptions)) *MockDocService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]readme.RequestOptions, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(readme.RequestOptions)
			}
		}
		run(args[0].(readme.DocParams), variadicArgs...)
	})
	return _c
}

func (_c *MockDocService_Create_Call) Return(_a0 readme.Doc, _a1 *readme.APIResponse, _a2 error) *MockDocService_Create_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockDocService_Create_Call) RunAndReturn(run func(readme.DocParams, ...readme.RequestOptions) (readme.Doc, *readme.APIResponse, error)) *MockDocService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: slug, options
func (_m *MockDocService) Delete(slug string, options ...readme.RequestOptions) (bool, *readme.APIResponse, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, slug)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	var r1 *readme.APIResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(string, ...readme.RequestOptions) (bool, *readme.APIResponse, error)); ok {
		return rf(slug, options...)
	}
	if rf, ok := ret.Get(0).(func(string, ...readme.RequestOptions) bool); ok {
		r0 = rf(slug, options...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, ...readme.RequestOptions) *readme.APIResponse); ok {
		r1 = rf(slug, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*readme.APIResponse)
		}
	}

	if rf, ok := ret.Get(2).(func(string, ...readme.RequestOptions) error); ok {
		r2 = rf(slug, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockDocService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockDocService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - slug string
//   - options ...readme.RequestOptions
func (_e *MockDocService_Expecter) Delete(slug interface{}, options ...interface{}) *MockDocService_Delete_Call {
	return &MockDocService_Delete_Call{Call: _e.mock.On("Delete",
		append([]interface{}{slug}, options...)...)}
}

func (_c *MockDocService_Delete_Call) Run(run func(slug string, options ...readme.RequestOptions)) *MockDocService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]readme.RequestOptions, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(readme.RequestOptions)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockDocService_Delete_Call) Return(_a0 bool, _a1 *readme.APIResponse, _a2 error) *MockDocService_Delete_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockDocService_Delete_Call) RunAndReturn(run func(string, ...readme.RequestOptions) (bool, *readme.APIResponse, error)) *MockDocService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: doc, options
func (_m *MockDocService) Get(doc string, options ...readme.RequestOptions) (readme.Doc, *readme.APIResponse, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, doc)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 readme.Doc
	var r1 *readme.APIResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(string, ...readme.RequestOptions) (readme.Doc, *readme.APIResponse, error)); ok {
		return rf(doc, options...)
	}
	if rf, ok := ret.Get(0).(func(string, ...readme.RequestOptions) readme.Doc); ok {
		r0 = rf(doc, options...)
	} else {
		r0 = ret.Get(0).(readme.Doc)
	}

	if rf, ok := ret.Get(1).(func(string, ...readme.RequestOptions) *readme.APIResponse); ok {
		r1 = rf(doc, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*readme.APIResponse)
		}
	}

	if rf, ok := ret.Get(2).(func(string, ...readme.RequestOptions) error); ok {
		r2 = rf(doc, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockDocService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockDocService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - doc string
//   - options ...readme.RequestOptions
func (_e *MockDocService_Expecter) Get(doc interface{}, options ...interface{}) *MockDocService_Get_Call {
	return &MockDocService_Get_Call{Call: _e.mock.On("Get",
		append([]interface{}{doc}, options...)...)}
}

func (_c *MockDocService_Get_Call) Run(run func(doc string, options ...readme.RequestOptions)) *MockDocService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]readme.RequestOptions, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(readme.RequestOptions)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockDocService_Get_Call) Return(_a0 readme.Doc, _a1 *readme.APIResponse, _a2 error) *MockDocService_Get_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockDocService_Get_Call) RunAndReturn(run func(string, ...readme.RequestOptions) (readme.Doc, *readme.APIResponse, error)) *MockDocService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function with given fields: query, options
func (_m *MockDocService) Search(query string, options ...readme.RequestOptions) ([]readme.DocSearchResult, *readme.APIResponse, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []readme.DocSearchResult
	var r1 *readme.APIResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(string, ...readme.RequestOptions) ([]readme.DocSearchResult, *readme.APIResponse, error)); ok {
		return rf(query, options...)
	}
	if rf, ok := ret.Get(0).(func(string, ...readme.RequestOptions) []readme.DocSearchResult); ok {
		r0 = rf(query, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]readme.DocSearchResult)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...readme.RequestOptions) *readme.APIResponse); ok {
		r1 = rf(query, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*readme.APIResponse)
		}
	}

	if rf, ok := ret.Get(2).(func(string, ...readme.RequestOptions) error); ok {
		r2 = rf(query, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockDocService_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type MockDocService_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - query string
//   - options ...readme.RequestOptions
func (_e *MockDocService_Expecter) Search(query interface{}, options ...interface{}) *MockDocService_Search_Call {
	return &MockDocService_Search_Call{Call: _e.mock.On("Search",
		append([]interface{}{query}, options...)...)}
}

func (_c *MockDocService_Search_Call) Run(run func(query string, options ...readme.RequestOptions)) *MockDocService_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]readme.RequestOptions, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(readme.RequestOptions)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockDocService_Search_Call) Return(_a0 []readme.DocSearchResult, _a1 *readme.APIResponse, _a2 error) *MockDocService_Search_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockDocService_Search_Call) RunAndReturn(run func(string, ...readme.RequestOptions) ([]readme.DocSearchResult, *readme.APIResponse, error)) *MockDocService_Search_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: slug, params, options
func (_m *MockDocService) Update(slug string, params readme.DocParams, options ...readme.RequestOptions) (readme.Doc, *readme.APIResponse, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, slug, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 readme.Doc
	var r1 *readme.APIResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(string, readme.DocParams, ...readme.RequestOptions) (readme.Doc, *readme.APIResponse, error)); ok {
		return rf(slug, params, options...)
	}
	if rf, ok := ret.Get(0).(func(string, readme.DocParams, ...readme.RequestOptions) readme.Doc); ok {
		r0 = rf(slug, params, options...)
	} else {
		r0 = ret.Get(0).(readme.Doc)
	}

	if rf, ok := ret.Get(1).(func(string, readme.DocParams, ...readme.RequestOptions) *readme.APIResponse); ok {
		r1 = rf(slug, params, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*readme.APIResponse)
		}
	}

	if rf, ok := ret.Get(2).(func(string, readme.DocParams, ...readme.RequestOptions) error); ok {
		r2 = rf(slug, params, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockDocService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockDocService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - slug string
//   - params readme.DocParams
//   - options ...readme.RequestOptions
func (_e *MockDocService_Expecter) Update(slug interface{}, params interface{}, options ...interface{}) *MockDocService_Update_Call {
	return &MockDocService_Update_Call{Call: _e.mock.On("Update",
		append([]interface{}{slug, params}, options...)...)}
}

func (_c *MockDocService_Update_Call) Run(run func(slug string, params readme.DocParams, options ...readme.RequestOptions)) *MockDocService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]readme.RequestOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(readme.RequestOptions)
			}
		}
		run(args[0].(string), args[1].(readme.DocParams), variadicArgs...)
	})
	return _c
}

func (_c *MockDocService_Update_Call) Return(_a0 readme.Doc, _a1 *readme.APIResponse, _a2 error) *MockDocService_Update_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockDocService_Update_Call) RunAndReturn(run func(string, readme.DocParams, ...readme.RequestOptions) (readme.Doc, *readme.APIResponse, error)) *MockDocService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDocService creates a new instance of MockDocService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDocService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDocService {
	mock := &MockDocService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
